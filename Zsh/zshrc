# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    colored-man-pages  # man page colorized
    #z  # auto jump to history changed dir
    # _Completions___________
    #git  # git suggestion
    #httpie  # HTTPie completion
    #npm  # npm completion
    #pip  # pip completion
    #python  # python completion
    #rust  # rustc/rustup/cargo completion
    #fzf  # fzf completion
    # _3rd party's___________
    zsh-nvm  # 3rd party plugins. add wraps of nvm command.
    zsh-autosuggestions  # 3rd party plugins. gray suggestions in tail
    zsh-syntax-highlighting  # 3rd party plugins. highlights shell commands
)
case $(uname -a) in  # this problem only on Windows Subsystem Linux
    *Microsoft*)
        unsetopt BG_NICE  # for "z", to avoid _z_precmd:1: nice(5) failed: operation not permitted
        export LS_COLORS="${LS_COLORS}ow=34;36:"  # change windows directory bg color.
        ;;
    *Darwin*)
        eval $(/opt/homebrew/bin/brew shellenv)
        ;;
esac

export NVM_LAZY_LOAD=true  # Lazy load for zsh-nvm

# Python User Site-Package Binaries
if _has_cmd python3; then
    export PATH="$(python3 -m site --user-base)/bin:$PATH"
fi

# Init Zoxide (z and zi)
if _has_cmd zoxide; then
    eval "$(zoxide init zsh)"
fi

source $ZSH/oh-my-zsh.sh

_echo() {  # Print message with different types
    local UNDERLINE=$'\e[4m'
    local DIM=$'\e[2m'
    local RESET=$'\e[0m'

    local type="$1"
    shift
    local message="$@"

    case "$type" in
        --err)
            echo -e "${DIM}[${RESET}${UNDERLINE}Error${RESET}${DIM}]${RESET} $message" >&2
            ;;
        --warn)
            echo -e "${DIM}[${RESET}Warning${DIM}]${RESET} $message"
            ;;
        --info)
            echo -e "${DIM}[Info]${RESET} $message"
            ;;
        --debug)
            echo -e "[Debug] $message"
            ;;
        --title)
            echo ""
            if [[ $(echo "═║╔╗╚╝") == "═║╔╗╚╝" ]]; then
                local horizontal_bar=$(printf '═%.0s' $(seq 1 ${#message}))
                local vertical_bar="║"
                local top_left="╔═"
                local top_right="═╗"
                local bottom_left="╚═"
                local bottom_right="═╝"
            else
                local horizontal_bar=$(printf '=%.0s' $(seq 1 ${#message}))
                local vertical_bar="|"
                local top_left="+="
                local top_right="=+"
                local bottom_left="+="
                local bottom_right="=+"
            fi
            echo -e "${DIM}${top_left}${horizontal_bar}${top_right}${RESET}"
            echo -e "${DIM}${vertical_bar}${RESET} $message ${DIM}${vertical_bar}${RESET}"
            echo -e "${DIM}${bottom_left}${horizontal_bar}${bottom_right}${RESET}"
            ;;
        --command)
            echo -e "${DIM}\$${RESET} ${UNDERLINE}$message${RESET}"
            ;;
        *)
            echo "$type $message"
            ;;
    esac
}

_verbose_run() {  # Print command before running it
    _echo --command "$1"
    eval "$1"
}

_has_cmd() {  # Check if command exists
    # Usage:
    #    _has_cmd 'cmd'  # Check if cmd exists
    #    _has_cmd -v/--verbose 'cmd'  # Check if cmd exists, and print error message if not exists
    local verbose=0
    if [[ "$1" == '-v' || "$1" == '--verbose' ]]; then
        verbose=1
        shift
    fi
    if command -v "$@" > /dev/null 2>&1; then  # Command exists
        return 0
    else  # Command not exists
        [[ "$verbose" == 1 ]] && _echo --err "Command not found: $1"
        return 1
    fi
}

fzfcd() {  # Use fzf to select a file, and cd to its directory
    _has_cmd --verbose 'fzf' || return 1  # If fzf not installed, return False
    cd "$(dirname "$(fzf --preview 'bat --color=always --line-range=:100 {}' --preview-window up)")"
}

up() {  # Upgrade all packages
    upgrade_pipx() {
        _echo --title 'Upgrade Pipx Packages'
        _has_cmd --verbose 'pipx' || return 1  # If pipx not installed, return False
        _verbose_run "pipx upgrade-all"  # 20s
    }
    update_pip() {
        _echo --title 'Update pip'
        _has_cmd --verbose 'python3' || return 1  # If python3 not installed, return False
        _verbose_run "python3 -m pip install --upgrade pip"
    }
    upgrade_brew() {
        if [[ "$(uname -s)" == "Darwin" ]]; then  # Only work on macOS
            _echo --title 'Upgrade Brew Packages'
            _has_cmd --verbose 'brew' || return 1  # If brew not installed, return False
            _verbose_run 'brew update'
            _verbose_run 'brew upgrade'
            _verbose_run 'brew list --cask | xargs brew upgrade --cask'
            _verbose_run 'brew autoremove'
            _verbose_run 'brew cleanup --prune=all'
        fi
    }
    upgrade_apt() {
        if [[ "$(uname -s)" == "Linux" ]]; then  # Only work on Linux
            _echo --title 'Upgrade Apt Packages'
            _has_cmd --verbose 'apt' || return 1  # If apt not installed, return False
            _verbose_run 'sudo apt update'
            _verbose_run 'sudo apt dist-upgrade -y'
            _verbose_run 'sudo apt auto-remove -y'
        fi
    }
    upgrade_snap() {
        if [[ "$(uname -s)" == "Linux" ]]; then  # Only work on Linux
            _echo --title 'Upgrade Snap Packages'
            _has_cmd --verbose 'snap' || return 1  # If snap not installed, return False
            _verbose_run 'sudo snap refresh'
        fi
    }
    update_omz() {
        _echo --title 'Update Oh-My-Zsh'
        _has_cmd --verbose 'omz' || return 1  # If omz not installed, return False
        _verbose_run 'omz update'
    }
    local upgrades=('pipx' 'brew' 'apt' 'snap')  # Available package managers for upgrades
    local updates=('pip' 'omz')  # Available package managers to updates
    if [[ $# -eq 0 ]]; then  # Run 'up' to run all upgrades.
        for pm in "${upgrades[@]}"; do
            eval "upgrade_$pm"
        done
        for pm in "${updates[@]}"; do
            eval "update_$pm"
        done
    else  # Run 'up pip brew' for brew and pip upgrades only.
        for arg in "$@"; do
            if [[ " ${upgrades[*]} " =~ " $arg " ]]; then  # $arg is in upgrades
                eval "upgrade_$arg"
            elif [[ " ${updates[*]} " =~ " $arg " ]]; then  # $arg is in updates
                eval "update_$arg"
            else
                echo "[Error] Unknown package manager: $arg"
                echo "[Info] Supported package managers: ${upgrades[*]} ${updates[*]}"
            fi
        done
    fi
}

venv() {  # Deactivate if in a venv, or activate .venv/bin/activate
    local requirements=('requirements.txt' 'requirements-dev.txt' 'requirements-opt.txt')
    # If venv is activated, deactivate it.
    if [[ -n "$VIRTUAL_ENV" ]]; then
        _verbose_run "deactivate"
        return
    fi
    # check uv command
    _has_cmd --verbose 'uv' || return 1
    # If .venv/ not exists, create venv and relaunch the function.
    if [[ ! -d "./.venv" ]]; then
        _verbose_run "uv venv"  # create venv
        venv
        return
    fi
    # If .venv/ exists, but not executable, recreate venv and relaunch the function.
    if [[ ! -x "./.venv/bin/python" ]]; then
        _verbose_run "rm -r ./.venv"  # remove venv
        venv
        return
    fi
    # If .venv/ exists, but version is old, recreate the.venv/
    if ! ./.venv/bin/python --version &> /dev/null; then
        _verbose_run "rm -r ./.venv"  # remove venv
        venv
        return
    fi
    # If .venv/ exists, and python is executable, update it and activate
    for file in ${requirements[@]}; do
        if [[ -f "./$file" ]]; then
            _verbose_run "uv pip install --refresh -r ./$file"
        fi
    done
    # Activate the venv
    _verbose_run "source ./.venv/bin/activate"
}

# if p10k config is already done, uncomment the following line.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
